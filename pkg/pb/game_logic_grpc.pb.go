// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: game_logic.proto

package cyber

import (
	context "context"
	"cyber/pkg/pb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GameLogicService_GetAction_FullMethodName = "/game_logic.GameLogicService/GetAction"
	GameLogicService_AddAction_FullMethodName = "/game_logic.GameLogicService/AddAction"
)

// GameLogicServiceClient is the client API for GameLogicService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GameLogicServiceClient interface {
	GetAction(ctx context.Context, in *pb.ActionRequest, opts ...grpc.CallOption) (*pb.ActionResponse, error)
	AddAction(ctx context.Context, in *pb.LogicRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type gameLogicServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGameLogicServiceClient(cc grpc.ClientConnInterface) GameLogicServiceClient {
	return &gameLogicServiceClient{cc}
}

func (c *gameLogicServiceClient) GetAction(ctx context.Context, in *pb.ActionRequest, opts ...grpc.CallOption) (*pb.ActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(pb.ActionResponse)
	err := c.cc.Invoke(ctx, GameLogicService_GetAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gameLogicServiceClient) AddAction(ctx context.Context, in *pb.LogicRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, GameLogicService_AddAction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GameLogicServiceServer is the server API for GameLogicService service.
// All implementations must embed UnimplementedGameLogicServiceServer
// for forward compatibility.
type GameLogicServiceServer interface {
	GetAction(context.Context, *pb.ActionRequest) (*pb.ActionResponse, error)
	AddAction(context.Context, *pb.LogicRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedGameLogicServiceServer()
}

// UnimplementedGameLogicServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGameLogicServiceServer struct{}

func (UnimplementedGameLogicServiceServer) GetAction(context.Context, *pb.ActionRequest) (*pb.ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAction not implemented")
}
func (UnimplementedGameLogicServiceServer) AddAction(context.Context, *pb.LogicRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAction not implemented")
}
func (UnimplementedGameLogicServiceServer) mustEmbedUnimplementedGameLogicServiceServer() {}
func (UnimplementedGameLogicServiceServer) testEmbeddedByValue()                          {}

// UnsafeGameLogicServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GameLogicServiceServer will
// result in compilation errors.
type UnsafeGameLogicServiceServer interface {
	mustEmbedUnimplementedGameLogicServiceServer()
}

func RegisterGameLogicServiceServer(s grpc.ServiceRegistrar, srv GameLogicServiceServer) {
	// If the following call pancis, it indicates UnimplementedGameLogicServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GameLogicService_ServiceDesc, srv)
}

func _GameLogicService_GetAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameLogicServiceServer).GetAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameLogicService_GetAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameLogicServiceServer).GetAction(ctx, req.(*pb.ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GameLogicService_AddAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(pb.LogicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GameLogicServiceServer).AddAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GameLogicService_AddAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GameLogicServiceServer).AddAction(ctx, req.(*pb.LogicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GameLogicService_ServiceDesc is the grpc.ServiceDesc for GameLogicService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GameLogicService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "game_logic.GameLogicService",
	HandlerType: (*GameLogicServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAction",
			Handler:    _GameLogicService_GetAction_Handler,
		},
		{
			MethodName: "AddAction",
			Handler:    _GameLogicService_AddAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "game_logic.proto",
}
